version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: financial-pipeline-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - financial-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/financial_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - FRONTEND_URL=http://localhost:5000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: financial-pipeline-frontend
    restart: unless-stopped
    ports:
      - "5000:80"
    networks:
      - financial-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial-pipeline-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=financial_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - financial-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d financial_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial-pipeline-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: financial-pipeline-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - financial-network
    depends_on:
      - postgres

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: financial-pipeline-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    networks:
      - financial-network
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  financial-network:
    driver: bridge